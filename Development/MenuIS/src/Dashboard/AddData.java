package Dashboard;

import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.InputMismatchException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dell
 */
public class AddData extends javax.swing.JFrame {
    
    private static AddData obj1 = null;
    
    public static ArrayList<String> data;
    String imgPath;
    MenuInfo obj = new MenuInfo();
    /**
     * Creates new form AddData
     */
    private AddData() {
        initComponents();
    }
 
    /**
     * this initializes the object of the class if it is null
     * this prevents the frame from opening again and again.
     * @return 
     */
    public static AddData getObj() {
        if (obj1 == null) {
            obj1 = new AddData();
        }
        return obj1;
    }
    
    /**
     * this method checks for the biggest pet id in the array
     * then sets the pet id in the text field of the add form incrementing it by one for the nest pet to be added.
     */
    public void setIdDefault(){
        int max = 0; 
        for (int i = 0; i < MenuInfo.array.size(); i++) {
            int element = Integer.parseInt(MenuInfo.array.get(i).get(0));
            if (max < element) {
                max = element;
            }
        }
        max += 1;
        id.setText(String.valueOf(max));
    }
    
    /**
     * this method returns the selected radio button from the add form
     * @return 
     */
    private String getRadioSelection() {
        String getNature ="";
        if (radioLoyal.isSelected()){
            getNature = radioLoyal.getText();
            
        } else if (radioAggressive.isSelected()) {
            getNature = radioAggressive.getText();
            
        } else if (radioPassive.isSelected()) {
            getNature = radioPassive.getText();
            
        } else if(radioInquisitive.isSelected()) {
            getNature = radioInquisitive.getText();
            
        }
        return getNature;
    }
    
    /**
     * this method return the selected check box from the add form
     * @return 
     */
    private String getCheckSelection() {
        String getSize = "";
        
        if (checkBig.isSelected()){
            
            getSize = checkBig.getText();
            checkMed.setSelected(false);
            checkSmall.setSelected(false);
            
        } else if (checkMed.isSelected()) {
            
            getSize = checkMed.getText();
            checkBig.setSelected(false);
            checkSmall.setSelected(false);
            
        } else if (checkSmall.isSelected()) {
            
            getSize = checkSmall.getText();
            checkBig.setSelected(false);
            checkMed.setSelected(false);
        }    
        return getSize;  
    }
    
    /**
     * this method makes sure the integer value for the price, quantity, age, lifespan is non fractional and non negative
     * @param id
     * @param price
     * @param quantity
     * @return 
     */
    private boolean checkForInt(String id, String price, String quantity) {
        boolean flag ;
        int price_, quantity_, id_;
        try {
                price_ = Integer.parseInt(price);
                quantity_ = Integer.parseInt(quantity);
                id_ = Integer.parseInt(id);

                if (price_ > 0 && quantity_ > 0 && id_ > 0) {
                    flag = true;
                } else {
                    flag = false;
                    JOptionPane.showMessageDialog (null,"Make sure the id, quantity and price are non-negative", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
        } catch(InputMismatchException | NumberFormatException e) {
            JOptionPane.showMessageDialog (null,"Please input whole numbers only", "Error", JOptionPane.ERROR_MESSAGE);
            flag = false;
        }
        
        return flag;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioButton = new javax.swing.ButtonGroup();
        checkBox = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        age = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        id = new javax.swing.JTextField();
        lifespan = new javax.swing.JTextField();
        category = new javax.swing.JTextField();
        quantity = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        radioLoyal = new javax.swing.JRadioButton();
        radioAggressive = new javax.swing.JRadioButton();
        radioPassive = new javax.swing.JRadioButton();
        radioInquisitive = new javax.swing.JRadioButton();
        checkBig = new javax.swing.JCheckBox();
        checkMed = new javax.swing.JCheckBox();
        checkSmall = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        addImage = new javax.swing.JButton();
        add = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(50, 50, 50));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/add_data.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Add Data");

        age.setBackground(new java.awt.Color(64, 64, 64));
        age.setForeground(new java.awt.Color(255, 255, 255));
        age.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageActionPerformed(evt);
            }
        });
        age.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ageKeyTyped(evt);
            }
        });

        name.setBackground(new java.awt.Color(64, 64, 64));
        name.setForeground(new java.awt.Color(255, 255, 255));
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });
        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameKeyTyped(evt);
            }
        });

        id.setBackground(new java.awt.Color(64, 64, 64));
        id.setForeground(new java.awt.Color(255, 255, 255));

        lifespan.setBackground(new java.awt.Color(64, 64, 64));
        lifespan.setForeground(new java.awt.Color(255, 255, 255));
        lifespan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lifespanActionPerformed(evt);
            }
        });

        category.setBackground(new java.awt.Color(64, 64, 64));
        category.setForeground(new java.awt.Color(255, 255, 255));
        category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryActionPerformed(evt);
            }
        });

        quantity.setBackground(new java.awt.Color(64, 64, 64));
        quantity.setForeground(new java.awt.Color(255, 255, 255));
        quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityActionPerformed(evt);
            }
        });
        quantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quantityKeyTyped(evt);
            }
        });

        price.setBackground(new java.awt.Color(64, 64, 64));
        price.setForeground(new java.awt.Color(255, 255, 255));
        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });
        price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceKeyTyped(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/id.png"))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Category");

        jLabel5.setFont(new java.awt.Font("Arial Black", 0, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Name");

        jLabel6.setFont(new java.awt.Font("Arial Black", 0, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Age");

        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Lifespan");

        jLabel8.setFont(new java.awt.Font("Arial Black", 0, 15)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Quantity");

        jLabel9.setFont(new java.awt.Font("Arial Black", 0, 15)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Size");

        jLabel10.setFont(new java.awt.Font("Arial Black", 0, 15)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Price");

        jLabel11.setFont(new java.awt.Font("Arial Black", 0, 15)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Nature");

        radioLoyal.setBackground(new java.awt.Color(64, 64, 64));
        radioButton.add(radioLoyal);
        radioLoyal.setForeground(new java.awt.Color(255, 255, 255));
        radioLoyal.setText("Loyal");

        radioAggressive.setBackground(new java.awt.Color(64, 64, 64));
        radioButton.add(radioAggressive);
        radioAggressive.setForeground(new java.awt.Color(255, 255, 255));
        radioAggressive.setText("Aggressive");

        radioPassive.setBackground(new java.awt.Color(64, 64, 64));
        radioButton.add(radioPassive);
        radioPassive.setForeground(new java.awt.Color(255, 255, 255));
        radioPassive.setText("Passive");

        radioInquisitive.setBackground(new java.awt.Color(64, 64, 64));
        radioButton.add(radioInquisitive);
        radioInquisitive.setForeground(new java.awt.Color(255, 255, 255));
        radioInquisitive.setText("Inquisitive");

        checkBig.setBackground(new java.awt.Color(64, 64, 64));
        checkBox.add(checkBig);
        checkBig.setForeground(new java.awt.Color(255, 255, 255));
        checkBig.setText("Big");

        checkMed.setBackground(new java.awt.Color(64, 64, 64));
        checkBox.add(checkMed);
        checkMed.setForeground(new java.awt.Color(255, 255, 255));
        checkMed.setText("Medium");

        checkSmall.setBackground(new java.awt.Color(64, 64, 64));
        checkBox.add(checkSmall);
        checkSmall.setForeground(new java.awt.Color(255, 255, 255));
        checkSmall.setText("Small");

        jLabel12.setFont(new java.awt.Font("Arial Black", 0, 15)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Image");

        addImage.setText("Choose Image...");
        addImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageActionPerformed(evt);
            }
        });

        add.setBackground(new java.awt.Color(26, 200, 151));
        add.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel10)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel11)
                                                .addComponent(jLabel9)
                                                .addComponent(jLabel12)))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(category, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(price, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                                        .addComponent(age))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel7)
                                                        .addComponent(jLabel8))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(quantity, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                                        .addComponent(lifespan)))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(radioLoyal, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(radioPassive))
                                                    .addGap(53, 53, 53)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(radioAggressive)
                                                        .addComponent(radioInquisitive))
                                                    .addGap(30, 30, 30)))
                                            .addComponent(addImage)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(checkBig)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(checkMed)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(checkSmall)))))
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 37, Short.MAX_VALUE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lifespan, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(radioLoyal)
                    .addComponent(radioAggressive))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioPassive)
                    .addComponent(radioInquisitive))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(checkBig)
                    .addComponent(checkMed)
                    .addComponent(checkSmall))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(addImage))
                .addGap(60, 60, 60)
                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        setSize(new java.awt.Dimension(571, 794));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lifespanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lifespanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lifespanActionPerformed

    private void categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryActionPerformed

    private void quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceActionPerformed
    
    /**
     * this method clears all the value from the add form
     */
    public void clear () {
        id.setText("");
        name.setText("");
        category.setText("");
        age.setText("");
        lifespan.setText("");
        quantity.setText("");
        price.setText("");
        checkBox.clearSelection();
        radioButton.clearSelection();
    }
    
    /**
     * this is the add button in the add form
     * this method takes all the user inputs and the adds the new values into the table.
     * this method checks for validation by calling other methods
     * @param evt 
     */
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        try{ 
            data = new ArrayList<String>();
             
            String getId = id.getText();
            String getName = name.getText();
            String getCategory = category.getText();
            String getAge = age.getText();
            String getLifespan = lifespan.getText();
            String getQuantity = quantity.getText(); 
            String getPrice = price.getText();
            String getNature = getRadioSelection();
            String getSize = getCheckSelection();
            
            int counter = 0;
            
            if ("".equals(getName)){
                counter += 1;
                JOptionPane.showMessageDialog (null,"The name is empty", "Error", JOptionPane.ERROR_MESSAGE);
            }
      
            if ("".equals(getId)){
                counter += 1;
                JOptionPane.showMessageDialog (null,"The id is empty", "Error", JOptionPane.ERROR_MESSAGE);
            }
                
            if ("".equals(getCategory)){
                counter += 1;
                JOptionPane.showMessageDialog (null,"The category is empty", "Error", JOptionPane.ERROR_MESSAGE);
            }
             
            if ("".equals(getAge)){
                counter += 1;
                JOptionPane.showMessageDialog (null,"The age is empty", "Error", JOptionPane.ERROR_MESSAGE);
            }
               
            if ("".equals(getLifespan)){
                counter += 1;
                JOptionPane.showMessageDialog (null,"The life span is empty", "Error", JOptionPane.ERROR_MESSAGE);
            }
              
            if ("".equals(getQuantity)){
                counter += 1;
                JOptionPane.showMessageDialog (null,"The quantity is empty", "Error", JOptionPane.ERROR_MESSAGE);
            }
              
            if ("".equals(getPrice)){
                counter += 1;
                JOptionPane.showMessageDialog (null,"The price is empty", "Error", JOptionPane.ERROR_MESSAGE);
            }
             
            if ("".equals(getNature)){
                counter += 1;
                JOptionPane.showMessageDialog (null,"The nature is not selected", "Error", JOptionPane.ERROR_MESSAGE);
            }
           
            if ("".equals(getSize)){
                counter += 1;
                JOptionPane.showMessageDialog (null,"The size has not been selected", "Error", JOptionPane.ERROR_MESSAGE);
            }
           
            if ("".equals(imgPath) || imgPath == null){
                counter += 1;
                JOptionPane.showMessageDialog (null,"No image has been selected", "Error", JOptionPane.ERROR_MESSAGE);
            }
                
            if (counter == 0){
                getName = getName.substring(0,1).toUpperCase() + getName.substring(1).toLowerCase();
                getCategory = getCategory.substring(0,1).toUpperCase() + getCategory.substring(1).toLowerCase();
                
                String newCat = getCategory;
                if (checkForInt(getId, getQuantity, getPrice)) {
                    
                    int noZero = Integer.parseInt(getQuantity);
                    getQuantity = String.valueOf(noZero);
                    
                    noZero = Integer.parseInt(getPrice);
                    getPrice = String.valueOf(noZero);
                    
                    int check = 0;
                    for (int i = 0; i < MenuInfo.array.size(); i++) {
                        if ((MenuInfo.array.get(i).get(0)).equals(getId) || (MenuInfo.array.get(i).get(1)).equals(getName)) {
                            JOptionPane.showMessageDialog (null,"Sorry, a data with the same name or id already exists", "Error", JOptionPane.ERROR_MESSAGE);
                            check += 1;
                            break;
                        
                        }
                    }
                    
                    if (check == 0) {
                        data.add(0, getId);
                        data.add(1, getName);
                        data.add(2, getCategory);
                        
                        data.add(3, getAge);
                        data.add(4,getLifespan);
                        data.add(5, getSize);
                        data.add(6, getNature);
                        data.add(7, getQuantity);
                        data.add(8, getPrice);
                        data.add(9, imgPath);
                            
                        MenuInfo.array.add(data); 
                        obj.addData();  
                        obj.checkCategory(getCategory);
                        clear();
                        setIdDefault();
                    }
                    
                }
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog (null,"The table is empty. Make sure you import a csv file into the table.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_addActionPerformed
    
    /**
     * this method opens the file selector for the user to add image for the new pet.
     * @param evt 
     */
    private void addImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImageActionPerformed
        try {
                JFileChooser file=new JFileChooser();
                file.showOpenDialog(null);
                file.setCurrentDirectory(new File(System.getProperty("user.home")));
                File f = file.getSelectedFile();
                imgPath=f.getAbsolutePath();
                
                String extension = "";
                //checking if the file format is csv or not
                    int j = imgPath.lastIndexOf('.');
                    if (j >= 0) {
                        extension = imgPath.substring(j+1);
                        extension = extension.toLowerCase();
                    }
                if (extension.equals("png") || extension.equals("jpg") || extension.equals("jpeg")){
                    //Do nothing
                    //return the value
                }
                else {
                    JOptionPane.showMessageDialog (null,"Please select a proper image file. It should be either png, jpg or jpeg.", "Error", JOptionPane.ERROR_MESSAGE);
                    addImageActionPerformed(evt);
                }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog (null,"No file selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addImageActionPerformed

    private void ageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageActionPerformed
    
    /**
     * this method restricts the user fro inputting non-numeric value for the age of the pet
     * @param evt 
     */
    private void ageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ageKeyTyped
        // TODO add your handling code here:
        char dn= evt.getKeyChar();
        if(!(Character.isDigit(dn) || (dn==KeyEvent.VK_BACK_SPACE) || dn==KeyEvent.VK_DELETE)){
            evt.consume();
        }
    }//GEN-LAST:event_ageKeyTyped
    
    /**
     * this method restricts the user fro inputting non-numeric value for the quantity of the pet
     * @param evt 
     */
    private void quantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityKeyTyped
        // TODO add your handling code here:
        char dn= evt.getKeyChar();
        if(!(Character.isDigit(dn) || (dn==KeyEvent.VK_BACK_SPACE) || dn==KeyEvent.VK_DELETE)){
            evt.consume();
        }
    }//GEN-LAST:event_quantityKeyTyped
    
    /**
     * this method restricts the user fro inputting non-numeric value for the price of the pet
     * @param evt 
     */
    private void priceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceKeyTyped
        // TODO add your handling code here:
        char dn= evt.getKeyChar();
        if(!(Character.isDigit(dn) || (dn==KeyEvent.VK_BACK_SPACE) || dn==KeyEvent.VK_DELETE)){
            evt.consume();
        }
    }//GEN-LAST:event_priceKeyTyped
    
    /**
     * this method only allows character inputs for the name of the et
     * @param evt 
     */
    private void nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyTyped
        // TODO add your handling code here:
        char dn= evt.getKeyChar();
        if((Character.isDigit(dn) || (dn==KeyEvent.VK_BACK_SPACE) || dn==KeyEvent.VK_DELETE)){
            evt.consume();
        }
    }//GEN-LAST:event_nameKeyTyped

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AddData().setVisible(true);
        });
        
        new AddData().addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                JOptionPane.showMessageDialog (null,"Don't go.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton addImage;
    private javax.swing.JTextField age;
    private javax.swing.JTextField category;
    private javax.swing.JCheckBox checkBig;
    private javax.swing.ButtonGroup checkBox;
    private javax.swing.JCheckBox checkMed;
    private javax.swing.JCheckBox checkSmall;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField lifespan;
    private javax.swing.JTextField name;
    private javax.swing.JTextField price;
    private javax.swing.JTextField quantity;
    private javax.swing.JRadioButton radioAggressive;
    private javax.swing.ButtonGroup radioButton;
    private javax.swing.JRadioButton radioInquisitive;
    private javax.swing.JRadioButton radioLoyal;
    private javax.swing.JRadioButton radioPassive;
    // End of variables declaration//GEN-END:variables

}
