/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Dashboard;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class MenuInfo extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public static ArrayList<ArrayList<String>> array;
    private int mousepX, mousepY;
    public static DefaultTableModel model;
    private String filePath;
    public static ArrayList<String> newCategory = new ArrayList<>();
    public static String drive;

    public MenuInfo() {
        initComponents();
    }

    /**
     * return the object of the table
     *
     * @return
     */
    public int getRowCount() {

        return model.getRowCount();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        window = new javax.swing.JPanel();
        exit = new javax.swing.JButton();
        minimize = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        side_panel = new javax.swing.JPanel();
        add = new javax.swing.JButton();
        view_details = new javax.swing.JButton();
        del = new javax.swing.JButton();
        admin = new javax.swing.JButton();
        log_out = new javax.swing.JButton();
        update = new javax.swing.JButton();
        main = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        petTable = new javax.swing.JTable();
        user_logo = new javax.swing.JLabel();
        denoter = new javax.swing.JLabel();
        user_name = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        searchPrice = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        category = new javax.swing.JComboBox<>();
        availability = new javax.swing.JButton();
        sortPrice1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        footer = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        import_csv = new javax.swing.JMenuItem();
        menu_exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jDialog1.setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        jDialog1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        jDialog1.setLocation(new java.awt.Point(0, -10));
        jDialog1.setUndecorated(true);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 962, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 609, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(34, 56, 32));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 400, 1000));
        setUndecorated(true);

        window.setBackground(new java.awt.Color(45, 54, 76));
        window.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(200, 200, 200)));
        window.setAlignmentY(10.0F);
        window.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                windowMouseDragged(evt);
            }
        });
        window.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                windowMousePressed(evt);
            }
        });

        exit.setBackground(new java.awt.Color(45, 54, 76));
        exit.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("X");
        exit.setToolTipText("exit");
        exit.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                exitMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                exitMouseMoved(evt);
            }
        });
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitMouseExited(evt);
            }
        });
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        minimize.setBackground(new java.awt.Color(45, 54, 76));
        minimize.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        minimize.setForeground(new java.awt.Color(255, 255, 255));
        minimize.setText("-");
        minimize.setToolTipText("minimize");
        minimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimizeActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Pet Store");

        javax.swing.GroupLayout windowLayout = new javax.swing.GroupLayout(window);
        window.setLayout(windowLayout);
        windowLayout.setHorizontalGroup(
            windowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, windowLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel4)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(minimize, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        windowLayout.setVerticalGroup(
            windowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(windowLayout.createSequentialGroup()
                .addGroup(windowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minimize, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(0, 15, Short.MAX_VALUE))
        );

        side_panel.setBackground(new java.awt.Color(45, 54, 76));

        add.setBackground(new java.awt.Color(45, 54, 76));
        add.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/add.png"))); // NOI18N
        add.setText("Add       ");
        add.setToolTipText("add data in table");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        view_details.setBackground(new java.awt.Color(45, 54, 76));
        view_details.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        view_details.setForeground(new java.awt.Color(255, 255, 255));
        view_details.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/details.png"))); // NOI18N
        view_details.setText("View     ");
        view_details.setToolTipText("view data of table");
        view_details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_detailsActionPerformed(evt);
            }
        });

        del.setBackground(new java.awt.Color(45, 54, 76));
        del.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        del.setForeground(new java.awt.Color(255, 255, 255));
        del.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/delete.png"))); // NOI18N
        del.setText("Delete");
        del.setToolTipText("delete data");
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });

        admin.setBackground(new java.awt.Color(0, 130, 180));
        admin.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        admin.setText("Log In ");
        admin.setToolTipText("login for staff");
        admin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminActionPerformed(evt);
            }
        });

        log_out.setBackground(new java.awt.Color(45, 54, 76));
        log_out.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/power-off.png"))); // NOI18N
        log_out.setToolTipText("logout for staff");
        log_out.setOpaque(false);
        log_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                log_outActionPerformed(evt);
            }
        });

        update.setBackground(new java.awt.Color(45, 54, 76));
        update.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/update.png"))); // NOI18N
        update.setText("Update");
        update.setToolTipText("update data in table");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout side_panelLayout = new javax.swing.GroupLayout(side_panel);
        side_panel.setLayout(side_panelLayout);
        side_panelLayout.setHorizontalGroup(
            side_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(side_panelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(admin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(39, 39, 39))
            .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
            .addComponent(view_details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, side_panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(log_out)
                .addGap(70, 70, 70))
        );
        side_panelLayout.setVerticalGroup(
            side_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(side_panelLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(view_details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(65, 65, 65)
                .addComponent(admin, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(log_out)
                .addGap(49, 49, 49))
        );

        add.setEnabled(false);
        del.setEnabled(false);
        log_out.setEnabled(false);
        update.setEnabled(false);

        main.setBackground(new java.awt.Color(53, 63, 89));

        petTable.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        petTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pet No.", "Pet Name", "Category", "Age", "Lifespan", "Size", "Nature", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        petTable.getTableHeader().setReorderingAllowed(false);
        petTable.setCellSelectionEnabled(true);
        petTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(petTable);

        user_logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/user.png"))); // NOI18N

        denoter.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        denoter.setForeground(new java.awt.Color(143, 154, 165));
        denoter.setText("Logged In As");

        user_name.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        user_name.setForeground(new java.awt.Color(12, 183, 84));
        user_name.setText("Customer");
        user_name.setToolTipText("logged in user");

        search.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        search.setToolTipText("search according to price");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchKeyTyped(evt);
            }
        });
        search.setEnabled(false);

        searchPrice.setBackground(new java.awt.Color(255, 165, 0));
        searchPrice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/search.png"))); // NOI18N
        searchPrice.setToolTipText("search button. cickthis button to search the price");
        searchPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPriceActionPerformed(evt);
            }
        });
        searchPrice.setEnabled(false);

        refresh.setBackground(new java.awt.Color(53, 63, 89));
        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/refresh.png"))); // NOI18N
        refresh.setToolTipText("refresh");
        refresh.setOpaque(false);
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        category.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"<None>"}));
        category.setToolTipText("category");
        category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryActionPerformed(evt);
            }
        });

        availability.setBackground(new java.awt.Color(187, 55, 42));
        availability.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        availability.setForeground(new java.awt.Color(255, 255, 255));
        availability.setText("Check Availibility");
        availability.setToolTipText("search according to category");
        availability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availabilityActionPerformed(evt);
            }
        });

        sortPrice1.setBackground(new java.awt.Color(53, 63, 89));
        sortPrice1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        sortPrice1.setForeground(new java.awt.Color(255, 255, 255));
        sortPrice1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/sort.png"))); // NOI18N
        sortPrice1.setToolTipText("sort price by asending");
        sortPrice1.setEnabled(false);
        sortPrice1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortPrice1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Pet Details");
        jLabel7.setToolTipText("details");

        javax.swing.GroupLayout mainLayout = new javax.swing.GroupLayout(main);
        main.setLayout(mainLayout);
        mainLayout.setHorizontalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1413, Short.MAX_VALUE)
                    .addGroup(mainLayout.createSequentialGroup()
                        .addComponent(user_logo)
                        .addGap(27, 27, 27)
                        .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainLayout.createSequentialGroup()
                                .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(availability, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sortPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainLayout.createSequentialGroup()
                                .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainLayout.createSequentialGroup()
                                        .addComponent(denoter)
                                        .addGap(265, 265, 265)
                                        .addComponent(jLabel7)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(mainLayout.createSequentialGroup()
                                        .addComponent(user_name)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)))))
                .addContainerGap())
        );
        mainLayout.setVerticalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainLayout.createSequentialGroup()
                .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(denoter)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(user_name)
                                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(searchPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(availability, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(sortPrice1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainLayout.createSequentialGroup()
                        .addGap(21, 32, Short.MAX_VALUE)
                        .addComponent(user_logo)
                        .addGap(55, 55, 55)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        footer.setBackground(new java.awt.Color(255, 255, 255));
        footer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/logo-colored.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Script MT Bold", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(147, 112, 219));
        jLabel2.setText("Pet Store");

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(105, 105, 105));
        jLabel3.setText("KamalPokhari, Kathmandu");

        jLabel5.setForeground(new java.awt.Color(105, 105, 105));
        jLabel5.setText("+977-9876543210");

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(105, 105, 105));
        jLabel6.setText("+977 9876543210");

        javax.swing.GroupLayout footerLayout = new javax.swing.GroupLayout(footer);
        footer.setLayout(footerLayout);
        footerLayout.setHorizontalGroup(
            footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(footerLayout.createSequentialGroup()
                .addGroup(footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(footerLayout.createSequentialGroup()
                        .addGap(642, 642, 642)
                        .addComponent(jLabel5))
                    .addGroup(footerLayout.createSequentialGroup()
                        .addGap(355, 355, 355)
                        .addComponent(jLabel1)
                        .addGroup(footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(footerLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel3))
                            .addGroup(footerLayout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(jLabel6))
                            .addGroup(footerLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        footerLayout.setVerticalGroup(
            footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(footerLayout.createSequentialGroup()
                .addGroup(footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, footerLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, footerLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );

        jMenuBar1.setBackground(new java.awt.Color(45, 54, 76));
        jMenuBar1.setForeground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setAlignmentY(0.5F);
        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenuBar1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jMenuBar1.setEnabled(true);
        jMenuBar1.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(66, 25));

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/import.png"))); // NOI18N
        jMenu1.setText("File");
        jMenu1.setToolTipText("file menu");

        import_csv.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        import_csv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/import.png"))); // NOI18N
        import_csv.setText("Import");
        import_csv.setToolTipText("import csv file");
        import_csv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_csvActionPerformed(evt);
            }
        });
        jMenu1.add(import_csv);

        menu_exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menu_exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/menu_exit.png"))); // NOI18N
        menu_exit.setText("Exit");
        menu_exit.setToolTipText("exit application");
        menu_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_exitActionPerformed(evt);
            }
        });
        jMenu1.add(menu_exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenu2.setToolTipText("see user guide");

        jMenuItem1.setText("See User guide");
        jMenuItem1.setToolTipText("opens user guiide");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(window, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(side_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(footer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(window, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(footer, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(side_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the application
     *
     * @param evt
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        //Exiting the application
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    /**
     * This method minimizes the application
     *
     * @param evt
     */
    private void minimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimizeActionPerformed
        //minmize
        this.setState(MenuInfo.ICONIFIED);
    }//GEN-LAST:event_minimizeActionPerformed

    /**
     * This method accepts the category of a pet that is newly added or update
     * It then checks if the category already exists If not it adds the new
     * category into an array to be added to JComboBox.
     *
     * @param category_
     */
    public void checkCategory(String category_) {

        int count = 0;
        try {
            for (int i = 0; i < array.size(); i++) {
                if (category_.equals(array.get(i).get(2))) {
                    count += 1;
                }
            }

            if (count == 1) {
                MenuInfo.newCategory.add(category_);

            }

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Wow", "Success!!", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * This method is called from AddData class After the user inserts value
     * into the add form all the values has be to be added into the table It
     * creates a new row and adds the new row
     */
    public void addData() {

        model.addRow(new String[]{AddData.data.get(0), AddData.data.get(1), AddData.data.get(2), AddData.data.get(3), AddData.data.get(4), AddData.data.get(5), AddData.data.get(6), AddData.data.get(7), AddData.data.get(8)});

        JOptionPane.showMessageDialog(null, "The new row has been added. Please refresh the table to see the changes in  category", "Success!!", JOptionPane.INFORMATION_MESSAGE);
        AddData.getObj().setVisible(false);
    }

    /**
     * This is the add button On clicking this method the add form is visible
     *
     * @param evt
     */
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed

        try {

            AddData.getObj().setVisible(true);
            AddData.getObj().setIdDefault();

            refresh();
            model.setRowCount(0);
            addToTable();

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "The table is empty.", "Error", JOptionPane.ERROR_MESSAGE);
            AddData.getObj().setVisible(false);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MenuInfo.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_addActionPerformed

    /**
     * this method calls the object of the Details class and makes it visible
     * then it calls the viewDetails() method which accepts the pet id and the
     * two dimensional arrayList
     *
     * @param evt
     */
    private void view_detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_detailsActionPerformed
        //View details
        int rowIndex_ = 1;
        int id = 0;
        try {

            if (petTable.getCellSelectionEnabled()) {
                //petTable.setSelectionModel(ListSelectionModel.SINGLE_SELECTION);
                rowIndex_ = petTable.getSelectedRow();
                id = Integer.parseInt(model.getValueAt(rowIndex_, 0).toString());
            }

            Details.getObj().viewDetails(id, array);
            Details.getObj().setVisible(true);

        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "No records found.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(null, "You have to select a row to view the details.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_view_detailsActionPerformed

    /**
     * this methods takes in the pet id to be deleted then it deletes all the
     * values for the corresponding id from the arrayList and the table
     *
     * @param evt
     */
    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
        String id = JOptionPane.showInputDialog("Enter pet id");
        //try {
        int i;
        boolean match = false;

        for (i = 0; i < array.size(); i++) {
            String petId = array.get(i).get(0);
            if (petId.equals(id)) {
                JOptionPane.showMessageDialog(null, "The pet named " + array.get(i).get(1) + " has been deleted.", "Success", JOptionPane.INFORMATION_MESSAGE);
                array.remove(i);
                refresh();
                model.removeRow(getRowCount() - 1);
                match = true;
                break;
            }

        }
        if (match == false) {
            JOptionPane.showMessageDialog(null, "please enter proper data to delete", "Error", JOptionPane.INFORMATION_MESSAGE);
        }

        //} //catch (NullPointerException e) {
        //JOptionPane.showMessageDialog(null, "Looks like the table is empty. Please import a csv file into the table", "Error", JOptionPane.ERROR_MESSAGE);
        //}
    }//GEN-LAST:event_delActionPerformed
    /**
     * This is for the privilege system At default the add, delete and update
     * function in the application is disabled When trying to login a
     * JOptionPane follows up that asks for the password On providing with the
     * correct password the aforementioned functionalities are unlocked This is
     * for the super-user or the staff
     *
     * @param evt
     */
    private void adminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminActionPerformed
        //Login as Admin
        try {
            String pass = JOptionPane.showInputDialog("Password");

            if (pass.equals("admin")) {

                add.setEnabled(true);
                del.setEnabled(true);
                update.setEnabled(true);
                log_out.setEnabled(true);
                user_logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/admin.png")));

                user_name.setText("Staff");
                admin.setEnabled(false);

            } else if (pass.length() <= 0) {
                JOptionPane.showMessageDialog(null, "Please input a password", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Wrong Password", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Please input a password", "Error", JOptionPane.ERROR_MESSAGE);

        }


    }//GEN-LAST:event_adminActionPerformed
    /**
     * The following series of methods (exitMouseMoved and exitMouseExited) is
     * for the exit button This is to create a hover effect When the mouse is
     * moved over the button the color changes to red and the when the mouse is
     * moved the color changes back
     *
     * @param evt
     */
    private void exitMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseMoved
        exit.setBackground(new java.awt.Color(255, 34, 56));
    }//GEN-LAST:event_exitMouseMoved

    private void exitMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_exitMouseDragged

    private void exitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseEntered

    }//GEN-LAST:event_exitMouseEntered

    private void exitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseExited
        exit.setBackground(new java.awt.Color(45, 54, 76));
    }//GEN-LAST:event_exitMouseExited
    /**
     * This method is for the staff to logout After logging out the customer
     * user cannot update, delete or add to the data
     *
     * @param evt
     */
    private void log_outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_log_outActionPerformed
        //logout

        // asks the user if he/she wants to logout with a dialog box
        Object[] options = {"Yes", "No"};
        int n = JOptionPane.showOptionDialog(null,
                "Are you sure, you want to log out?",
                "Are you sure?",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]);

        //when the user clicks on yes it returns a 0
        //On clicking no it return 1
        if (n == 0) {
            add.setEnabled(false);
            del.setEnabled(false);
            log_out.setEnabled(false);
            update.setEnabled(false);

            admin.setEnabled(true);
            user_logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Dashboard/images/user.png")));
            user_name.setText("Customer");
        }
    }//GEN-LAST:event_log_outActionPerformed

    /**
     * Utility which converts CSV to ArrayList using Split Operation
     *
     * @param CSV
     * @return
     */
    private ArrayList<String> CSVtoArrayList(String CSV) {
        ArrayList<String> Result = new ArrayList<String>();

        if (CSV != null) {
            String[] splitData = CSV.split("\\s*,\\s*");
            for (int i = 0; i < splitData.length; i++) {
                if (!(splitData[i] == null) || !(splitData[i].length() == 0)) {
                    Result.add(splitData[i].trim());
                }

            }
        }

        return Result;
    }

    /**
     * this method adds all the data from the CSV into the main two dimensional
     * arrayList @array it reads the csv file using the bufferedReader class
     * which reads each of the line in the csv file then each of the line is
     * added to the arrayList
     */
    private void addToArray() {
        BufferedReader Buffer = null;

        try {
            String Line;
            Buffer = new BufferedReader(new FileReader(filePath));
            MenuInfo.array = new ArrayList<ArrayList<String>>();
            Buffer.readLine();
            // How to read file in java line by line?
            while ((Line = Buffer.readLine()) != null) {
                MenuInfo.array.add(CSVtoArrayList(Line));
            }
           

        } catch (IOException e) {
        } finally {
            try {
                if (Buffer != null) {
                    Buffer.close();
                }
            } catch (IOException Exception) {
            }
        }
    }

    /**
     * This method adds the data from the two dimensional array @array into the
     * table When a CSV file is imported for the first time the sort button,
     * searchPrice button, search text field are enabled
     *
     * @throws FileNotFoundException
     */
    private void addToTable() throws FileNotFoundException {
        for (int i = 0; i < array.size(); i++) {
            //The delimeter in a csv file is ","
            String[] row = new String[]{array.get(i).get(0),
                array.get(i).get(1),
                array.get(i).get(2),
                array.get(i).get(3),
                array.get(i).get(4),
                array.get(i).get(5),
                array.get(i).get(6),
                array.get(i).get(7),
                array.get(i).get(8)};
            model.addRow(row);

        }

        if (model.getRowCount() > 0) {
            sortPrice1.setEnabled(true);
            search.setEnabled(true);
            searchPrice.setEnabled(true);
        }
    }

    /**
     * This method adds all the unique category from a CSV file in the JComboBox
     */
    private void addCategory() {
        String value1, value2;

        int i, j;
        for (i = 0; i < model.getRowCount(); i++) {
            value1 = model.getValueAt(i, 2).toString();
            for (j = 0; j < i; j++) {
                value2 = model.getValueAt(j, 2).toString();
                if (value1.equals(value2)) {
                    break;
                }
            }

            if (i == j) {
                category.addItem(value1);

            }
        }

        ComboBoxModel model = category.getModel();
        int size = model.getSize();

        for (int k = 0; k < size; k++) {
            Object element = model.getElementAt(k);

        }
    }

    /**
     * This method is allows the user to import a CSV file. File explorer is
     * used to import the CSV file Also checks for the extension type Doesn't
     * allow user to import file of any other type except for CSV. An object for
     * table is created and all the values are set in the table
     *
     * @param evt
     */
    private void import_csvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_csvActionPerformed
        // TODO add your handling code here:
        model = (DefaultTableModel) petTable.getModel();
        category.removeAllItems();
        if (model != null) {
            model.setRowCount(0);
        }
        try {
            if (array != null) {
                array.clear();
            }

            //Using file explorer to get the file path
            JFileChooser file = new JFileChooser();
            file.showOpenDialog(null);
            File f = file.getSelectedFile();
            filePath = f.getAbsolutePath();
            

            int iend = filePath.indexOf("MenuIS"); //this is done so that the image can be viewed no matter where the project lies in the computer
            drive = filePath.substring(0, iend);

            
            String extension = "";
            //checking if the file format is csv or not
            int j = filePath.lastIndexOf('.');
            if (j >= 0) {
                extension = filePath.substring(j + 1);
            }
            if (extension.equals("csv") || extension.equals("CSV")) {
                //String filePath = "C:\\Users\\Dell\\Desktop\\a.csv";

                //adding all values to table
                addToArray();
                addToTable();
                addCategory();

            } else {
                JOptionPane.showMessageDialog(null, "Please open a proper csv file");
                import_csvActionPerformed(evt);
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "No file selected.", "Info", JOptionPane.INFORMATION_MESSAGE);
            category.addItem("<None>");
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "File not found.", "Error", JOptionPane.ERROR_MESSAGE);
            category.addItem("<None>");
        } catch (StringIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "You can import the csv file only if it is inside the project file.", "Error", JOptionPane.ERROR_MESSAGE);
            category.addItem("<None>");
        }
    }//GEN-LAST:event_import_csvActionPerformed

    /**
     * this method is called by the
     * availabilityActionPerformed(java.awt.event.ActionEvent evt) it filters
     * all the data for the category and then only shows the filtered result in
     * the table
     *
     * @param array
     */
    private void updateTable(String[][] array) {
        for (int i = 0; i < array.length; i++) {
            model.addRow(new Object[]{null});
            for (int j = 0; j < array[0].length; j++) {
                model.setValueAt(array[i][j], i, j);
            }
        }
        availability.setEnabled(false);
    }

    /**
     * This method is for exiting the application from the menu
     *
     * @param evt
     */
    private void menu_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_exitActionPerformed
        //Exiting (Alt+F4)
        System.exit(0);
    }//GEN-LAST:event_menu_exitActionPerformed

    /**
     * The method windowMouseDragged and windowMousePressed allows the user to
     * drag the undecorated JFrame freely
     *
     * @param evt
     */
    private void windowMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_windowMouseDragged
        // Moving the undecorated JFrame
        int cordinateX = evt.getXOnScreen();
        int cordinateY = evt.getYOnScreen();

        this.setLocation(cordinateX - mousepX, cordinateY - mousepY);
    }//GEN-LAST:event_windowMouseDragged

    /**
     * This method gives the coordinates of the working screen on clicking the
     * frame with the cursor
     *
     * @param evt
     */
    private void windowMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_windowMousePressed
        // Moving the undecorated JFrame
        mousepX = evt.getX();
        mousepY = evt.getY();
    }//GEN-LAST:event_windowMousePressed

    /**
     * this method is called by
     * availabilityActionPerformed(java.awt.event.ActionEvent evt) it checks the
     * category and then adds the quantity of all the pets for that category it
     * then returns a boolean flag
     *
     * @param checkItem
     * @param row
     * @param quantity
     * @param columnCount
     * @param rowCount
     * @param available
     * @return
     */
    private boolean categorySelection(String checkItem, int row, int quantity, int columnCount, int rowCount, String[][] available) {
        boolean flag;
        for (int i = 0; i < rowCount; i++) {
            if (model.getValueAt(i, 2).equals(checkItem)) {
                row++;
                quantity += Integer.parseInt(model.getValueAt(i, 7).toString());
                for (int j = 0; j < columnCount; j++) {
                    available[row][j] = model.getValueAt(i, j).toString();
                }
            }

        }

        if (quantity > 0) {
            JOptionPane.showMessageDialog(null, "The number of " + checkItem + "s available are " + quantity, "Yes available", JOptionPane.INFORMATION_MESSAGE);
            model.setRowCount(0);
            flag = true;
        } else {
            JOptionPane.showMessageDialog(null, "There are no " + checkItem + "s available in the store", "Oops!", JOptionPane.INFORMATION_MESSAGE);
            flag = false;
        }

        return flag;
    }

    /**
     * this is the method for the check availability button this method checks
     * for all the category that is selected in the JComboBox for the all the
     * selected category the quantity of the pet is added then it calls the
     * categorySelection() if the categorySelection() return true boolean value
     * then the updateTable() is called
     *
     * @param evt
     */
    private void availabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availabilityActionPerformed
        // Check for avaiable items
        try {
            String checkItem = category.getSelectedItem().toString();
            int rowCount = model.getRowCount();
            int columnCount = model.getColumnCount();

            if (!checkItem.equals("<None>")) {

                String[][] available = new String[rowCount][columnCount];

                if (categorySelection(checkItem, -1, 0, columnCount, rowCount, available)) {
                    updateTable(available);
                }

            } else {
                JOptionPane.showMessageDialog(null, "You need to select a category", "No option selected", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "You need to import a csv file into the table ", "The table is empty!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_availabilityActionPerformed

    /**
     * This method refreshes the table and brings the table to its original
     * states Also when a user adds to or updates the table it also adds any new
     * category to the JComboBox
     */
    public void refresh() {
        try {

            if (MenuInfo.newCategory != null) {
                for (int i = 0; i < MenuInfo.newCategory.size(); i++) {
                    category.addItem(MenuInfo.newCategory.get(i));
                    MenuInfo.newCategory.clear();
                }
            }
            for (int i = 0; i < array.size(); i++) {
                for (int j = 0; j < array.get(i).size() - 1; j++) {
                    petTable.setValueAt(array.get(i).get(j), i, j);
                }
            }
            availability.setEnabled(true);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "You need to import a csv file into the table ", "The table is empty!", JOptionPane.ERROR_MESSAGE);
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "You need to import a csv file into the table ", "The table is empty!", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * this is the method for the refresh button this method calls the refresh()
     * method
     *
     * @param evt
     */
    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        refresh();
    }//GEN-LAST:event_refreshActionPerformed

    private void categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryActionPerformed

    /**
     * this is the method for the update button this method checks for empty
     * table and sends error method if the table is not empty all the values
     * from the row that the user wants to update is sent to a constructor The
     * constructor belongs to the Update.java class Also the update form is
     * opened if there are no errors
     *
     * @param evt
     */
    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        String id, name, categori, age, lifespan, size, nature, quantity, price, image;
        image = "";
        int rowIndex = 0;

        try {
            if (petTable.getCellSelectionEnabled()) {
                //petTable.setSelectionModel(ListSelectionModel.SINGLE_SELECTION);

                rowIndex = petTable.getSelectedRow();
                id = model.getValueAt(rowIndex, 0).toString();
                
                if (id != null) {

                    name = String.valueOf(model.getValueAt(rowIndex, 1));

                    categori = String.valueOf(model.getValueAt(rowIndex, 2));

                    age = String.valueOf(model.getValueAt(rowIndex, 3));

                    lifespan = String.valueOf(model.getValueAt(rowIndex, 4));

                    size = String.valueOf(model.getValueAt(rowIndex, 5));

                    nature = String.valueOf(model.getValueAt(rowIndex, 6));

                    quantity = String.valueOf(model.getValueAt(rowIndex, 7));

                    price = String.valueOf(model.getValueAt(rowIndex, 8));

                    for (int i = 0; i < array.size(); i++) {
                        if (id.equals(array.get(i).get(0))) {
                            image = array.get(i).get(9).toString();
                        }
                    }

                    Update upd = new Update(rowIndex, id, name, categori, age, lifespan, size, nature, quantity, price, image);
                    upd.setVisible(true);

                    upd.setValue();
                }
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "There are no values in the table.", "The table is empty!", JOptionPane.ERROR_MESSAGE);
            //upd.setVisible(false);
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(null, "You have to select a row you want to update.", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_updateActionPerformed

    /**
     * this is the method for the search button: the rows of the model is
     * counted a local price array is made to store price data An ArrayList
     * copyarray is made to store the SelectionSort.sortArray() is called to
     * sort the array and arraylist searcchelist method is called to search the
     * data if data is found the data is displayed in dailogbox.
     *
     * @param evt
     */
    private void searchPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPriceActionPerformed
        // TODO add your handling code here:
        try {
        if (search.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a price to search");
        } else {
            int rows = model.getRowCount();
            int[] price = new int[rows];
            for (int i = 0; i < petTable.getRowCount(); i++) {
                int value = Integer.parseInt(array.get(i).get(8));
                price[i] = value;
            }
            ArrayList<ArrayList<String>> copyarray = new ArrayList<>(array);
            SelectionSort.sortArray(price, copyarray);
            int key = Integer.parseInt(search.getText());
            int low = 0;
            int high = price.length - 1;
            int found = searchList(price, low, high, key);

            if (found == -1) {
                JOptionPane.showMessageDialog(null, "Search data not found");
            } else {
                JOptionPane.showMessageDialog(null, "Congratulations Search data found");
                String name = copyarray.get(found).get(1);
                String categori = copyarray.get(found).get(2);
                String prices = copyarray.get(found).get(8);
                JOptionPane.showMessageDialog(null, "The searched price is: " + prices
                        + "\nPet Name: " + name
                        + "\nCategory: " + categori);
            }
        }
        }catch (NumberFormatException x){
            JOptionPane.showMessageDialog(null, "please enter a positive integer","ERROR",JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_searchPriceActionPerformed

    /**
     * this is the method for the search button: the rows of the model is
     * counted a local price array is made to store price data An ArrayList
     * copy array is made to store the SelectionSort.sortArray() is called to
     * sort the array and ArrayList .the table is cleared and 
     * the sorted ArrayList is displayed  in the JTable
     * 
     * @param evt
     */
    private void sortPrice1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortPrice1ActionPerformed
        // TODO add your handling code here:
        int rows = model.getRowCount();
        int[] price = new int[rows];
        for (int i = 0; i < petTable.getRowCount(); i++) {
            int value = Integer.parseInt(array.get(i).get(8));
            price[i] = value;
        }
        ArrayList<ArrayList<String>> copyarray = new ArrayList<>(array);
        SelectionSort.sortArray(price, copyarray);
        model.setRowCount(0);

        for (int i = 0; i < copyarray.size(); i++) {
            //The delimeter in a csv file is ","
            String[] row = new String[]{copyarray.get(i).get(0),
                copyarray.get(i).get(1),
                copyarray.get(i).get(2),
                copyarray.get(i).get(3),
                copyarray.get(i).get(4),
                copyarray.get(i).get(5),
                copyarray.get(i).get(6),
                copyarray.get(i).get(7),
                copyarray.get(i).get(8)};
            model.addRow(row);
        }


    }//GEN-LAST:event_sortPrice1ActionPerformed

    /**
     * this method restricts the user to input any non numeric value in the
     * search field the search field only searches for the price of the pet
     *
     * @param evt
     */
    private void searchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyTyped
        // TODO add your handling code here:
        char dn = evt.getKeyChar();
        if (!(Character.isDigit(dn) || (dn == KeyEvent.VK_BACK_SPACE) || dn == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_searchKeyTyped

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        AppHelp.getObj().setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     *
     * @param price
     * @param low
     * @param high
     * @param key
     * @return
     */
    public int searchList(int price[], int low, int high, int key) {

        if (low <= high) {
            int mid = (low + high) / 2;

            if (price[mid] == key) {
                return mid;
            } else if (price[mid] > key) {
                return searchList(price, low, mid - 1, key);
            } else if (price[mid] < key) {
                return searchList(price, mid + 1, high, key);
            }
        }

        return -1;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    Thread.sleep(3000);
                } catch (Exception e) {

                }
                new MenuInfo().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton admin;
    private javax.swing.JButton availability;
    private javax.swing.JComboBox<String> category;
    private javax.swing.JButton del;
    private javax.swing.JLabel denoter;
    private javax.swing.JButton exit;
    private javax.swing.JPanel footer;
    private javax.swing.JMenuItem import_csv;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton log_out;
    private javax.swing.JPanel main;
    private javax.swing.JMenuItem menu_exit;
    private javax.swing.JButton minimize;
    private javax.swing.JTable petTable;
    private javax.swing.JButton refresh;
    private javax.swing.JTextField search;
    private javax.swing.JButton searchPrice;
    private javax.swing.JPanel side_panel;
    private javax.swing.JButton sortPrice1;
    private javax.swing.JButton update;
    private javax.swing.JLabel user_logo;
    private javax.swing.JLabel user_name;
    private javax.swing.JButton view_details;
    private javax.swing.JPanel window;
    // End of variables declaration//GEN-END:variables

}
